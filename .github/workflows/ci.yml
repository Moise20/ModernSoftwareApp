name: Build and Test Spring Boot Project

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3
      
      # Étape 2 : Lire un secret GitHub
      - name: Read secret
        run: echo "Secret value is ${{ secrets.MY_SECRET }}"
      
      # Étape 3 : Configuration de Java 17 avec la distribution Temurin
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      # Étape 4 : Cache des dépendances Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      
      # Étape 5 : Vérifier le formatage du code
      - name: Check code formatting with Spotless
        run: mvn spotless:check
      
      # Étape 6 : Compiler et installer les dépendances sans tests
      - name: Build with Maven
        run: mvn clean install -DskipTests
      
      # Étape 7 : Exécuter les tests
      - name: Run tests
        run: mvn test
      
      # Étape 8 : Générer le fichier JAR
      - name: Build Spring Boot project
        run: mvn package -DskipTests
      
      # Étape 9 : Afficher les fichiers générés
      - name: List files in target directory
        run: ls -al target/
      
      # Étape 10 : Upload du fichier JAR en tant qu'artefact
      - name: Upload JAR file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: target/*.jar
      
      # Étape 11 : Déterminer le nom du fichier JAR
      - name: Get JAR filename
        id: get-jar
        run: |
          echo "JAR_NAME=$(basename $(ls target/*.jar | head -n 1))" >> $GITHUB_ENV
      
      # Étape 12 : Exécuter l'application dans Docker avec capture d'écran
      - name: Run Docker container with JAR and take screenshot
        run: |
          # Démarrer le conteneur en arrière-plan et exposer le port 8080
          docker run -d --name spring-app -p 8080:8080 -v ${{ github.workspace }}/target:/app openjdk:17 java -jar /app/${JAR_NAME}
          
          # Attendre que l'application démarre
          sleep 15
          
          # Vérifier que le conteneur est en cours d'exécution
          docker ps
          
          # Capturer les logs du conteneur pour prouver qu'il fonctionne
          docker logs spring-app > docker_logs.txt
          
          # Option 1: Utiliser curl pour vérifier que l'application répond
          echo "Test d'accessibilité de l'application:"
          curl -s http://localhost:8080 || echo "L'application ne répond pas sur la racine, ce qui est normal si aucun endpoint n'est défini à la racine"
          
          # Générer une capture d'écran textuelle de l'état du conteneur
          echo "--- Capture d'écran Docker ---" > docker_screenshot.txt
          echo "Date: $(date)" >> docker_screenshot.txt
          echo "Container ID: $(docker ps -q --filter name=spring-app)" >> docker_screenshot.txt
          echo "Container Status: $(docker inspect --format='{{.State.Status}}' spring-app)" >> docker_screenshot.txt
          echo "Container Logs:" >> docker_screenshot.txt
          docker logs spring-app | tail -20 >> docker_screenshot.txt
          echo "------------------------" >> docker_screenshot.txt
          
          # Afficher la capture
          cat docker_screenshot.txt
          
          # Arrêter proprement le conteneur
          docker stop spring-app
          docker rm spring-app
      
      # Étape 13 : Simuler le déploiement
      - name: Simulated deploy
        run: |
          chmod +x deploy.sh
          ./deploy.sh