name: Build and Test Spring Boot Project

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Étape 1 : Récupérer le code source
      - name: Checkout code
        uses: actions/checkout@v3

      # Étape 2 : Lire un secret GitHub
      - name: Read secret
        run: echo "Secret value is ${{ secrets.MY_SECRET }}"

      # Étape 3 : Configuration de Java 17 avec la distribution Temurin
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # Étape 4 : Cache des dépendances Maven
      - name: Cache Maven dependencies
        uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # Étape 5 : Vérifier le formatage du code
      - name: Check code formatting with Spotless
        run: mvn spotless:check

      # Étape 6 : Compiler et installer les dépendances sans tests
      - name: Build with Maven
        run: mvn clean install -DskipTests

      # Étape 7 : Exécuter les tests
      - name: Run tests
        run: mvn test

      # Étape 8 : Générer le fichier JAR
      - name: Build Spring Boot project
        run: mvn package -DskipTests

      # Étape 9 : Afficher les fichiers générés
      - name: List files in target directory
        run: ls -al target/

      # Étape 10 : Upload du fichier JAR en tant qu'artefact
      - name: Upload JAR file as artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-boot-jar
          path: target/*.jar

      # Étape 11 : Simuler le déploiement
      - name: Simulated deploy
        run: |
          chmod +x deploy.sh
          ./deploy.sh
